<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="1" hostname="WongBen" name="pytest" skipped="0" tests="2" time="16.871" timestamp="2020-08-21T23:18:01.609784"><testcase classname="test_dir.test_baidu1.TestSearch" file="test_dir\test_baidu1.py" line="28" name="test_baidu_search_case2" time="6.977"></testcase><testcase classname="test_dir.test_baidu1" file="conftest.py" line="127" name="test_fix_1" time="7.275"><failure message="configparser.NoSectionError: No section: &apos;cmdopt&apos;">self = &lt;configparser.ConfigParser object at 0x0000019AB8806978&gt;
section = &apos;cmdopt&apos;, vars = None

    def _unify_values(self, section, vars):
        &quot;&quot;&quot;Create a sequence of lookups with &apos;vars&apos; taking priority over
        the &apos;section&apos; which takes priority over the DEFAULTSECT.
    
        &quot;&quot;&quot;
        sectiondict = {}
        try:
&gt;           sectiondict = self._sections[section]
E           KeyError: &apos;cmdopt&apos;

C:\ProgramData\Anaconda3\envs\AutoTest\lib\configparser.py:1138: KeyError

During handling of the above exception, another exception occurred:

cmdopt = &apos;stg1&apos;

    def test_fix_1(cmdopt):
        cfg = configparser.ConfigParser()
        cfg.read(&apos;config.ini&apos;, encoding=&apos;utf-8&apos;)
        print(&apos;cmdopt值为：&apos;, cmdopt)
&gt;       env = cfg.get(&apos;cmdopt&apos;, &apos;db_host&apos;)

conftest.py:132: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\ProgramData\Anaconda3\envs\AutoTest\lib\configparser.py:781: in get
    d = self._unify_values(section, vars)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = &lt;configparser.ConfigParser object at 0x0000019AB8806978&gt;
section = &apos;cmdopt&apos;, vars = None

    def _unify_values(self, section, vars):
        &quot;&quot;&quot;Create a sequence of lookups with &apos;vars&apos; taking priority over
        the &apos;section&apos; which takes priority over the DEFAULTSECT.
    
        &quot;&quot;&quot;
        sectiondict = {}
        try:
            sectiondict = self._sections[section]
        except KeyError:
            if section != self.default_section:
&gt;               raise NoSectionError(section)
E               configparser.NoSectionError: No section: &apos;cmdopt&apos;

C:\ProgramData\Anaconda3\envs\AutoTest\lib\configparser.py:1141: NoSectionError</failure></testcase></testsuite></testsuites>